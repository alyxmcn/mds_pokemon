ylab = "Gold Spending")
ggbetweenstats(data = pokemon,
x = defense,
y = attack,
type = "parametric",
var.equal = T,
plot.type = "box",
pairwise.comparisons = TRUE,
pairwise.display = "significant",
centrality.plotting = FALSE,
bf.message = FALSE,
xlab = "Position",
ylab = "Gold Spending")
ggbetweenstats(data = pokemon,
x = is_legendary,
y = defense,
type = "parametric",
var.equal = T,
plot.type = "box",
pairwise.comparisons = TRUE,
pairwise.display = "significant",
centrality.plotting = FALSE,
bf.message = FALSE,
xlab = "Position",
ylab = "Gold Spending")
table1(~ hp + attack + sp_attack + defense + sp_defense + speed | generation,
data = pokemon,
render.continuous=c(.="Mean", .="SD", .="Median [Min, Max]"),
caption = 'Base Stats by Generation Summary')
# this script computes means of all base stats by generations
generations_stats <- pokemon %>%
group_by(generation) %>%
summarize(across(all_of(c('hp', 'attack', 'sp_attack', 'defense',
'sp_defense', 'speed')), mean, na.rm = T))
# reshaping data to long format for plotting
means_by_generation_long <- pivot_longer(generations_stats, cols = -generation,
names_to = "stats", values_to = "value")
ggplot(means_by_generation_long, aes(x = generation, y = value, fill = stats)) +
geom_bar(stat = "identity", position = "dodge") +
facet_wrap(vars(stats), ncol = 2) +
scale_fill_manual(values = c('#d1615d','#e49444','#e7ca60',
'#5778a4','#6a9f58','#f1a2a9')) +
xlab("Generation") +
ylab("Mean") +
ggtitle("Means of Base Stats by Generation") +
guides(color = guide_legend(title = "base stats")) +
# adding error bars
geom_errorbar(aes(ymin=value-sd(value), ymax=value+sd(value)),
width=.2,
position=position_dodge(.9))
cor.matrix <- cor(pokemon[c('hp', 'attack', 'sp_attack', 'defense', 'sp_defense', 'speed')],
method = "pearson", use = "pairwise.complete.obs")
corrplot(cor.matrix, method = "number", order = "hclust", addrect=2)
cor.matrix <- cor(pokemon[c('hp', 'attack', 'sp_attack', 'defense', 'sp_defense', 'speed')],
method = "pearson", use = "pairwise.complete.obs")
corrplot(cor.matrix, method = "number", order = "hclust")
# 'lowerFn' function is defined to customize the appearance of the scatterplots in the lower half of the matrix. It adds points to the scatterplots and uses the geom_smooth function to add linear regression lines. The method argument of geom_smooth is set to "lm" to fit a linear regression line to the data.
lowerFn <- function(data, mapping, method = "lm") {
p <- ggplot(data = data, mapping = mapping) +
geom_point(colour = "#5778a4") +
geom_smooth(method = method, color = "#d1615d") +
theme_bw()
p
}
ggpairs(
data = pokemon[c('hp', 'attack', 'sp_attack', 'defense', 'sp_defense', 'speed')],
upper = list(continuous = "cor"),
lower = list(continuous = wrap(lowerFn, method = "lm")),
)
cor.matrix <- cor(pokemon[c('hp', 'attack', 'sp_attack', 'defense', 'sp_defense', 'speed')],
method = "pearson", use = "pairwise.complete.obs")
corrplot(cor.matrix, method = "number", order = "hclust")
pokemon[pokemon$name == 'Picachu']
pokemon[pokemon$name == 'Pikachu']
pokemon[[pokemon$name == 'Pikachu']]
pokemon[pokemon$name == 'Pikachu', ]
t(pokemon[pokemon$name == 'Pikachu', ])
pokemon[pokemon$name == 'Pikachu', ]
knitr::include_graphics("pics/pikachu.png")
knitr::include_graphics("pics/pikachu.png")
mds
# scree plot
plot(mds$values/sum(mds$values), type = "b", xlab = "Dimension", ylab = "% Variance Explained")
# scree plot
plot(mds$values/sum(mds$values), type = "b", xlab = "Dimension", ylab = "% Variance Explained")
# scree plot
plot(mds$values/sum(mds$values), type = "b", xlab = "Dimension", ylab = "% Variance Explained")
# scree plot
plot(mds$values/sum(mds$values), type = "b",
xlab = "Dimension",
ylab = "% Variance Explained",
xlim=c(0, 10))
# scree plot
plot(mds$values/sum(mds$values), type = "b",
xlab = "Dimension",
ylab = "% Variance Explained",
xlim=c(0, 10))
# scree plot
plot(mds$values/sum(mds$values),
type = "b",
xlab = "Dimension",
ylab = "% Variance Explained",
xlim = c(1, length(mds$values)))
# scree plot
plot(mds$values/sum(mds$values),
type = "b",
xlab = "Dimension",
ylab = "% Variance Explained",
xlim = c(1, length(mds$values)))
# scree plot
plot(mds$values/sum(mds$values), type = "b", xlab = "Dimension", ylab = "% Variance Explained", ylim = c(0,1))
# scree plot
plot(mds$values/sum(mds$values),
type = "b",
xlab = "Dimension",
ylab = "% Variance Explained",
xlim = c(1, length(mds$values)),
ylim = c(0,1))
# scree plot
plot(mds$values/sum(mds$values),
type = "b",
xlab = "Dimension",
ylab = "% Variance Explained",
xlim = c(1, length(mds$values)),
ylim = c(0,1))
# scree plot
plot(mds$values/sum(mds$values),
xlab = "Dimension",
ylab = "% Variance Explained",
xlim = c(1, length(mds$values)),
ylim = c(0,1))
# scree plot
# Compute the proportion of variance explained for each dimension
var_prop <- mds$values / sum(mds$values)
# Create a data frame with the dimension number and the proportion of variance explained
scree_data <- data.frame(Dimension = 1:length(var_prop), Variance_Explained = var_prop)
var_prop
mds$values
plot(dist_matrix, mds$conf[,1], xlab = "Original Distances", ylab = "MDS Distances")
mds$conf
mds$conf[,1]
stress_values <- c()
for (k in 1:10) {
mds_solution <- smacof::mds(dist_matrix, type = "interval", ndim = k)
stress_values <- c(stress_values, mds_solution$stress)
}
stress_values
plot(1:10, stress_values, type = "b", xlab = "Number of dimensions", ylab = "Stress")
plot(1:10, stress_values, type = "b", xlab = "Number of dimensions", ylab = "Stress",
main = "MDS Scree plot")
stress_values <- c()
for (k in 1:10) {
mds_solution <- smacof::mds(dist_matrix, ndim = k)
stress_values <- c(stress_values, mds_solution$stress)
}
plot(1:10, stress_values, type = "b", xlab = "Number of dimensions", ylab = "Stress",
main = "MDS Scree plot")
# the distances between original and reconstructed distances
dist_original <- as.matrix(dist_matrix)
dist_reconstructed <- as.matrix(dist(mds$conf))
# the Shepard diagram -----
plot(dist_original, dist_reconstructed, xlab = "Original distances", ylab = "Reconstructed distances", main = "Shepard Diagram")
plot(mds, type = "shepard")
plot(mds, plot.type = "Shepard"
plot(mds, plot.type = "Shepard")
plot(mds, plot.type = "Shepard")
plot(mds, plot.type = "stress")
plot(mds, plot.type = "scree")
plot(mds, plot.type = "stressplot")
# goodness-of-fit -----
n_objects <- mds$nobj
stress <- mds$stress
cat(paste0("Stress value: ", round(stress, 3), "\n"))
cat(paste0("Number of objects: ", n_objects))
mds2 <- (dist_matrix, ndim=2)
mds2 <- (dist_matrix, dim=2)
mds2 <- (dist_matrix, k=2)
mds2 <- mds(dist_matrix, dim=2)
mds2 <- mds(dist_matrix, ndim=2)
mds2 <- mds(dist_matrix, ndim=3)
mds2
plot(mds2)
plot(mds, plot.type = "histogram")
plot(mds, plot.type = "a")
plot(mds, plot.type = "confplot")
plot(mds, plot.type = "ress")
plot(mds, plot.type = "resplot")
plot(mds2, plot.type = "resplot")
plot(mds2, plot.type = "Shepard")
plot(mds2, plot.type = "histogram")
plot(mds2, plot.type = "d")
plot(mds2, plot.type = "bubbleplot")
plot(mds, plot.type = "bubbleplot")
plot(mds, plot.type = "histogram")
plot(mds, plot.type = "histogram")
plot(mds, plot.type = "stressplot")
plot(mds, plot.type = "Shepard")
plot(mds, plot.type = "bubbleplot")
plot(mds, plot.type = "d")
total_stats <- rowSums(pokemon[, c('hp', 'attack', 'defense', 'sp_attack', 'sp_defense', 'speed')])
dist_matrix2 <- dist(total_stats, method = "euclidean")
mds <- mds(dist_matrix)
mds2 <- mds(dist_matrix2)
plot(mds2, type = "p")
plot(mds2)
# create a new data frame with just the base stats
base_stats <- pokemon[, c('hp', 'attack', 'defense', 'sp_attack', 'sp_defense', 'speed')]
# calculate the correlation matrix
cor_matrix <- cor(base_stats)
# calculate the distance matrix based on the correlation
dist_matrix2 <- 1 - cor_matrix
# apply MDS to the distance matrix
mds2 <- mds(dist_matrix)
# plot the MDS solution
plot(mds2, type = "n", xlab = "Dimension 1", ylab = "Dimension 2")
text(mds2$points[,1], mds2$points[,2], colnames(cor_matrix), cex = 0.8)
plot(mds2, xlab = "Dimension 1", ylab = "Dimension 2")
text(mds2$points[,1], mds2$points[,2], colnames(cor_matrix), cex = 0.8)
# plot the MDS solution
plot(mds2, xlab = "Dimension 1", ylab = "Dimension 2")
# plot the MDS solution
plot(unfolding(dist_matrix))
# plot the MDS solution
plot(unfolding(pokemon))
# plot the MDS solution
plot(unfolding(pokemon[, c('hp', 'attack', 'defense', 'sp_attack', 'sp_defense', 'speed')]))
dist.t.2 <- dist(t(pokemon[, c('hp', 'attack', 'defense', 'sp_attack', 'sp_defense', 'speed')]), method = "euclidean")
mds2 <- mds(dist.t.2)
plot(poke.mds.4, type = 'n')
plot(mds2, type = 'n')
text(mds2, rownames(mds2), cex=0.8, adj = 0.5)
plot(mds2)
text(mds2, rownames(mds2), cex=0.8, adj = 0.5)
plot(mds2)
plot(mds2, type='shepard')
plot(mds2, type='Shepard')
plot(mds2, type='histogram')
mds2
plot(mds2)
text(mds2$points, labels = rownames(pokemon), col = "red")
dist_transposed <- dist(t(pokemon[, c('hp', 'attack', 'defense',
'sp_attack', 'sp_defense', 'speed')]),
method = "euclidean")
mds2 <- mds(dist_transposed)
plot(mds2)
text(mds2$points, labels = rownames(pokemon), col = "red")
plot(mds2, y = col = 'red')
plot(mds2, y = col = 'red')
plot(mds2, col = "red")
plot(mds2, col = "red", cex=3)
plot(mds2, col = "red", cex=2)
plot(mds2, col = c(0,1,2,3,4,5,6), cex=2)
plot(mds2, col = c(0), cex=2)
plot(mds2, col = c(1), cex=2)
,1,2,3,4,5,6
plot(mds2, col = c(0,1,2,3,4,5,6), cex=2)
plot(mds2,
col = c('#e7ca60','#d1615d','#e49444','#5778a4','#6a9f58','#f1a2a9'),
cex=2)
plot(mds2,
col = c('#e7ca60','#d1615d','#e49444','#5778a4','#6a9f58','#f1a2a9'),
cex=2)
dist_transposed <- dist(t(pokemon[, c('hp', 'attack', 'defense',
'sp_attack', 'sp_defense', 'speed')]),
method = "euclidean")
mds2 <- mds(dist_transposed)
plot(mds2,
col = c('#e7ca60','#d1615d','#e49444','#5778a4','#6a9f58','#f1a2a9'),
cex=2)
dist_transposed <- dist(t(pokemon[, c('hp', 'attack', 'defense',
'sp_attack', 'sp_defense', 'speed')]),
method = "euclidean")
mds2 <- mds(dist_transposed)
plot(mds2,
col = c('#e7ca60','#d1615d','#e49444','#5778a4','#6a9f58','#f1a2a9'),
cex=2)
df <- data.frame(mds$conf, name = pokemons$name)
ggplot(df, aes(x = D1, y = D2, label = name)) +
geom_point(size=.5) +
geom_text_repel(box.padding = 0.5, point.padding = 0.5,
max.iter = 500, force = 0.5, overlap = Inf,
size=3, show.legend = FALSE)  +
ggtitle("MDS of Pokemons") +
theme_bw()
ggplot(df, aes(x = D1, y = D2, label = name)) +
geom_point(size=.5) +
geom_text_repel(box.padding = 0.5, point.padding = 0.5,
max.iter = 500, force = 0.5, overlap = Inf,
size=3, show.legend = FALSE)  +
ggtitle("MDS Analysis Results (Pokemon)") +
theme_bw()
ggplot(df, aes(x = D1, y = D2, label = name)) +
geom_point(size=.5) +
geom_text_repel(box.padding = 0.5, point.padding = 0.5,
max.iter = 500, force = 0.5, overlap = Inf,
size=3, show.legend = FALSE)  +
ggtitle("MDS Analysis Results (Pokemon)") +
xlab('Dimesion 1') +
ylab('Dimension 2') +
theme_bw()
# hist -----
ggplot(means_by_generation_long, aes(x = generation, y = value, fill = stats)) +
geom_bar(stat = "identity", position = "dodge") +
facet_wrap(vars(stats), ncol = 2) +
scale_fill_manual(values = c('#d1615d','#e49444','#e7ca60',
'#5778a4','#6a9f58','#f1a2a9')) +
xlab("Generation") +
ylab("Mean") +
ggtitle("Means of Base Stats by Generation") +
guides(color = guide_legend(title = "base stats")) +
# adding error bars
geom_errorbar(aes(ymin=value-sd(value), ymax=value+sd(value)),
width=.2,
position=position_dodge(.9)) +
theme_bw()
df <- data.frame(mds$conf, name = pokemons$name, type1 = pokemon$type1)
set.seed(123)
df_sample <- df[sample(nrow(df), 50), ]
# MDS results with all labels as names of Pokemon
ggplot(df_sample, aes(x = D1, y = D2, label = name, color = type1)) +
geom_point(size = 3) +
geom_text_repel(box.padding = 0.5, point.padding = 0.5,
max.iter = 500, force = 0.5, overlap = Inf, size=3) +
ggtitle("MDS of Pokemons by Primary Type") +
theme_bw()
# MDS results with all labels as names of Pokemon
ggplot(df_sample, aes(x = D1, y = D2, label = name, color = type1)) +
geom_point(size = 3) +
geom_text_repel(box.padding = 0.5, point.padding = 0.5,
max.iter = 500, force = 0.5, overlap = Inf, size=3) +
ggtitle("MDS Analysis Results\n for subsample of Pokemon (n = 50)") +
theme_bw()
# MDS results with all labels as names of Pokemon
ggplot(df_sample, aes(x = D1, y = D2, label = name, color = type1)) +
geom_point(size = 3) +
geom_text_repel(box.padding = 0.5, point.padding = 0.5,
max.iter = 500, force = 0.5, overlap = Inf, size=3) +
ggtitle("MDS Analysis Results\nfor subsample of Pokemon (n = 50)") +
theme_bw()
# MDS results with all labels as names of Pokemon
ggplot(df_sample, aes(x = D1, y = D2, label = name, color = type1)) +
geom_point(size = 3) +
geom_text_repel(box.padding = 0.5, point.padding = 0.5,
max.iter = 500, force = 0.5, overlap = Inf, size=3) +
ggtitle("MDS Analysis Results") +
ggsubtitle("for subsample of Pokemon (n = 50)") +
theme_bw()
install.packages("Brattle")
# MDS results with all labels as names of Pokemon
ggplot(df_sample, aes(x = D1, y = D2, label = name, color = type1)) +
geom_point(size = 3) +
geom_text_repel(box.padding = 0.5, point.padding = 0.5,
max.iter = 500, force = 0.5, overlap = Inf, size=3) +
#ggtitle("MDS Analysis Results") +
#ggsubtitle("for subsample of Pokemon (n = 50)") +
labs(x="Dimension 1",
y="Dimension 2",
title="MDS Analysis Results",
subtitle="for subsample of Pokemon (n = 50)") +
theme_bw()
# MDS results with all labels as names of Pokemon
ggplot(df_sample, aes(x = D1, y = D2, label = name, color = type1)) +
geom_point(size = 3) +
geom_text_repel(box.padding = 0.5, point.padding = 0.5,
max.iter = 500, force = 0.5, overlap = Inf, size=3) +
labs(x="Dimension 1",
y="Dimension 2",
title="MDS Analysis Results",
subtitle="for subsample of Pokemon (n = 50)") +
guides(fill=guide_legend(title="Primary Type")) +
theme_bw()
# MDS results with all labels as names of Pokemon
ggplot(df_sample, aes(x = D1, y = D2, label = name, color = type1)) +
geom_point(size = 3) +
geom_text_repel(box.padding = 0.5, point.padding = 0.5,
max.iter = 500, force = 0.5, overlap = Inf, size=3) +
labs(x="Dimension 1",
y="Dimension 2",
title="MDS Analysis Results",
subtitle="for subsample of Pokemon (n = 50)",
fill="Primary Type") +
guides(fill=guide_legend(title="Primary Type")) +
theme_bw()
# MDS results with all labels as names of Pokemon
ggplot(df_sample, aes(x = D1, y = D2, label = name, color = type1)) +
geom_point(size = 3) +
geom_text_repel(box.padding = 0.5, point.padding = 0.5,
max.iter = 500, force = 0.5, overlap = Inf, size=3) +
labs(x="Dimension 1",
y="Dimension 2",
title="MDS Analysis Results",
subtitle="for subsample of Pokemon (n = 50)",
color="Primary Type") +
guides(fill=guide_legend(title="Primary Type")) +
theme_bw()
# MDS results with all labels as names of Pokemon
ggplot(df_sample, aes(x = D1, y = D2, label = name, color = type1)) +
geom_point(size = 3) +
geom_text_repel(box.padding = 0.5, point.padding = 0.5,
max.iter = 500, force = 0.5, overlap = Inf, size=3) +
labs(x="Dimension 1",
y="Dimension 2",
title="MDS Analysis Results",
subtitle="for a random subsample of Pokemon (n = 50)",
color="Primary Type") +
theme_bw()
knitr::include_graphics("pics/shuckle.png")
```{r, echo=FALSE, out.width='80%', fig.cap="Shuckle"}
knitr::include_graphics("pics/shuckle.png")
df <- data.frame(mds$conf, name = pokemon$name)
ggplot(df, aes(x = D1, y = D2, label = name)) +
geom_point(size=.5) +
geom_text_repel(box.padding = 0.5, point.padding = 0.5,
max.iter = 500, force = 0.5, overlap = Inf,
size=3, show.legend = FALSE)  +
ggtitle("MDS Analysis Results (Pokemon)") +
xlab('Dimesion 1') +
ylab('Dimension 2') +
theme_bw()
df <- data.frame(mds$conf, name = pokemons$name, type1 = pokemon$type1)
ggplot(df, aes(x = D1, y = D2, label = name)) +
geom_point(size=.5) +
geom_text_repel(box.padding = 0.5, point.padding = 0.5,
max.iter = 500, force = 0.5, overlap = Inf,
size=3, show.legend = FALSE)  +
ggtitle("MDS Analysis Results (Pokemon)") +
xlab('Dimesion 1') +
ylab('Dimension 2') +
theme_bw()
set.seed(123)
df_sample <- df[sample(nrow(df), 50), ]
# MDS results with all labels as names of Pokemon
ggplot(df_sample, aes(x = D1, y = D2, label = name, color = type1)) +
geom_point(size = 3) +
geom_text_repel(box.padding = 0.5, point.padding = 0.5,
max.iter = 500, force = 0.5, overlap = Inf, size=3) +
labs(x="Dimension 1",
y="Dimension 2",
title="MDS Analysis Results",
subtitle="for a random subsample of Pokemon (n = 50)",
color="Primary Type") +
theme_bw()
df <- data.frame(mds$conf, name = pokemon$name, type1 = pokemon$type1)
ggplot(df, aes(x = D1, y = D2, label = name)) +
geom_point(size=.5) +
geom_text_repel(box.padding = 0.5, point.padding = 0.5,
max.iter = 500, force = 0.5, overlap = Inf,
size=3, show.legend = FALSE)  +
ggtitle("MDS Analysis Results (Pokemon)") +
xlab('Dimesion 1') +
ylab('Dimension 2') +
theme_bw()
set.seed(123)
df_sample <- df[sample(nrow(df), 50), ]
# MDS results with all labels as names of Pokemon
ggplot(df_sample, aes(x = D1, y = D2, label = name, color = type1)) +
geom_point(size = 3) +
geom_text_repel(box.padding = 0.5, point.padding = 0.5,
max.iter = 500, force = 0.5, overlap = Inf, size=3) +
labs(x="Dimension 1",
y="Dimension 2",
title="MDS Analysis Results",
subtitle="for a random subsample of Pokemon (n = 50)",
color="Primary Type") +
theme_bw()
dist_transposed <- dist(t(pokemon[, c('hp', 'attack', 'defense',
'sp_attack', 'sp_defense', 'speed')]),
method = "euclidean")
mds2 <- mds(dist_transposed)
plot(mds2,
col = c('#e7ca60','#d1615d','#e49444','#5778a4','#6a9f58','#f1a2a9'),
cex=2)
plot(mds2,
type = 'res',
col = c('#e7ca60','#d1615d','#e49444','#5778a4','#6a9f58','#f1a2a9'),
cex = 2,
main = 'MDS Analysis Results (base stats similarity)')
plot(mds2,
type = 'r',
col = c('#e7ca60','#d1615d','#e49444','#5778a4','#6a9f58','#f1a2a9'),
cex = 2,
main = 'MDS Analysis Results (base stats similarity)')
plot(mds2, plot.type = 'aaa')
plot(mds, plot.type = 'resplot')
plot(mds, plot.type = 'config')
plot(mds, plot.type = 'confplot')
plot(mds2, plot.type = 'confplot')
plot(mds2, plot.type = 'n')
plot(mds2,
col = c('#e7ca60','#d1615d','#e49444','#5778a4','#6a9f58','#f1a2a9'),
cex = 2,
main = 'MDS Analysis Results (base stats similarity)')
plot(mds2,
col = c('#e7ca60','#d1615d','#e49444','#5778a4','#6a9f58','#f1a2a9'),
cex = 2,
main = 'MDS Analysis Results\n(base stats similarity)')
plot(mds2,
col = c('#e7ca60','#d1615d','#e49444','#5778a4','#6a9f58','#f1a2a9'),
cex = 2,
main = 'MDS Analysis Results (base stats similarity)')
print(pokemon[pokemon$name == 'Pikachu', ])
data.frame(pokemon[pokemon$name == 'Pikachu', ])
kable(pokemon[pokemon$name == 'Pikachu', ])
# NA Detection
kable(colSums(is.na(pokemon)))
# NA Detection
t(kable(colSums(is.na(pokemon))))
# NA Detection
kable(t(colSums(is.na(pokemon))))
# NA Detection
colSums(is.na(pokemon))
kable(t(pokemon[pokemon$name == 'Pikachu', ]))
